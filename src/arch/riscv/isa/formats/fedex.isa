// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// Fedex Memory operation instructions
//

def template FedexMemcpyDeclare {{
    /**
     * Static instruction class for "%(mnemonic)s".
     */
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);

        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault initiateAcc(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(PacketPtr, ExecContext *, Trace::InstRecord *) const override;
    };
}};


def template FedexMemcpyConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst):
        %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
    }
}};

def template FedexMemcpyExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        uint64_t Rs1 = 0;
        uint64_t Rs2 = 0;
        uint64_t Rs3 = 0;

        Rs1 = xc->getRegOperand(this, 0);
        Rs2 = xc->getRegOperand(this, 1);
        Rs3 = xc->getRegOperand(this, 2);

        {
            %(code)s;
        }
        return NoFault;
    }
}};

def template FedexMemcpyInitiateAcc {{
    Fault
    %(class_name)s::initiateAcc(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        uint64_t Rs1 = 0;
        uint64_t Rs2 = 0;
        uint64_t Rs3 = 0;

        Rs1 = xc->getRegOperand(this, 0);
        Rs2 = xc->getRegOperand(this, 1);
        Rs3 = xc->getRegOperand(this, 2);

        {
            %(init_code)s;
        }

    }
}};

def template FedexMemcpyCompleteAcc {{
    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        //** All things are handled by FedexCentral
        std::cout << "FedexMemcpyCompleteAcc\n" << std::endl;
        return NoFault;
    }
}};


let {{
def FedexBase(name, Name, base_class, code, init_code, decode_template=BasicDecode,
    exec_template_base=''):

    inst_flags = []
    iop = InstObjParams(name, Name, base_class, {'code': code, 'init_code': init_code}, inst_flags)

    # select templates
    fullExecTemplate = eval(exec_template_base + 'Execute')
    initiateAccTemplate = eval(exec_template_base + 'InitiateAcc')
    completeAccTemplate = eval(exec_template_base + 'CompleteAcc')    

    header_output = FedexMemcpyDeclare.subst(iop)
    decoder_output = FedexMemcpyConstructor.subst(iop)
    decode_block = decode_template.subst(iop)
    exec_output = fullExecTemplate.subst(iop) + initiateAccTemplate.subst(iop) + completeAccTemplate.subst(iop) 

    return (header_output, decoder_output, decode_block, exec_output)  
}};

def format Fedex(code, init_code){{

    (header_output, decoder_output, decode_block, exec_output) = \
        FedexBase(name, Name, 'Fedex', code, init_code, exec_template_base='FedexMemcpy')

}};